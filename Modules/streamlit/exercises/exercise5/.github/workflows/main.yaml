# .github/workflows/main.yml

name: Streamlit App CI # Name of the workflow displayed on GitHub Actions tab

# Controls when the workflow will run
on:
  push:
    branches: [ main ] # Triggers on push events to the main branch (use 'master' if that's your default)
  pull_request:
    branches: [ main ] # Also triggers on pull requests targeting the main branch

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This job is named "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest # Use the latest version of Ubuntu Linux

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # 1. Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout repository
        uses: actions/checkout@v4 # Use the standard checkout action

      # 2. Sets up Python environment
      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10' # Specify the Python version

      # 3. Cache dependencies to speed up subsequent runs
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip # Cache the pip cache directory
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }} # Cache key based on OS and requirements file hash
          restore-keys: |
            ${{ runner.os }}-pip- # Fallback key

      # 4. Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt # Install packages listed in requirements.txt

      # --- Optional Steps (Add later if needed) ---
      # - name: Lint with Flake8 (Example)
      #   run: |
      #     pip install flake8
      #     flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
      #     flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      # - name: Run Unit Tests (Example - if you have tests)
      #   run: |
      #     pip install pytest
      #     pytest